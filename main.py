import argparse
import logging
from src.load_data import load_data
from src.clean_data import clean_data
from src.eda import explore_data
from src.visualization import generate_visualizations

# Configuraci√≥n del logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    # Configuraci√≥n de argumentos de l√≠nea de comandos
    parser = argparse.ArgumentParser(description="An√°lisis Exploratorio de Datos del Titanic.")
    parser.add_argument("--input", default="data/train_and_test2.csv", help="Ruta del archivo de datos original.")
    parser.add_argument("--output", default="data/titanic_cleaned.csv", help="Ruta para guardar los datos limpios.")
    args = parser.parse_args()

    # 1Ô∏è‚É£ Cargar el dataset original
    df_original = load_data(args.input)
    if df_original is None:
        logger.error("üö® No se pudo cargar el archivo original. Saliendo del programa.")
        return

    # 2Ô∏è‚É£ Limpiar los datos y guardarlos en un nuevo archivo
    df_clean = clean_data(df_original, args.output)
    if df_clean is None:
        logger.error("üö® No se pudieron limpiar los datos. Saliendo del programa.")
        return

    # 3Ô∏è‚É£ Cargar el dataset limpio para an√°lisis
    df = load_data(args.output)
    if df is None:
        logger.error("üö® No se pudo cargar el archivo limpio. Saliendo del programa.")
        return

    # 4Ô∏è‚É£ Exploraci√≥n estad√≠stica
    explore_data(df)

    # 5Ô∏è‚É£ Visualizaci√≥n de datos
    generate_visualizations(df)

if __name__ == "__main__":
    main()